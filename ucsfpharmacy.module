<?php

use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\OpenOffCanvasDialogCommand;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Image\Image;
use Drupal\editor\Entity\Editor;
use Drupal\image\Entity\ImageStyle;
use Drupal\media\Entity\Media;
use Drupal\media\IFrameMarkup;
use Drupal\node\Entity\Node;

/**
 * Implements hook_form_alter().
 */
function ucsfpharmacy_form_alter(&$form, FormStateInterface $form_state, $form_id) {
	// Move published checkbox into revision information vertical pane.
	if(!empty($form['status']) && empty($form['status']['#group']) &&  !empty($form['revision_information'])) {
		$form['status']['#group'] = 'revision_information';
	}
	// start - 2020.0208 frankfarm: alter gallery buttons to clarify which buttons perform which actions on what objects since there are so many buttons, actions, and objects in the IEF table.
	if ($form_id == 'node_page_edit_form') {
		foreach ($form['field_gallery']['widget']['entities'] as $key => $entity_info) {
			if (is_numeric($key)) {
				$form['field_gallery']['widget']['entities'][$key]['actions']['ief_entity_edit']['#value'] = t('Edit gallery #' . strval( $key + 1 ) );
				$form['field_gallery']['widget']['entities'][$key]['actions']['ief_entity_remove']['#value'] = t('Remove gallery #' . strval( $key + 1 ) );
			}
		}
	}
	// end - 2020.0208 frankfarm: alter gallery buttons to clarify which buttons perform which actions since there are so many buttons in the IEF table.
}

/**
 * Implements hook_form_form_id_alter() for field_config_edit_form.
 */
function ucsfpharmacy_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state) {
	if(!empty($form['settings']['handler']['handler_settings']['target_bundles'])) {
		$form['settings']['handler']['handler_settings']['target_bundles']['#required'] = FALSE;
	}
}

/**
 * Implements hook_form_form_id_alter() for node_article_form.
 */
function ucsfpharmacy_form_node_article_form_alter(&$form, FormStateInterface $form_state) {
	// Adds a button that scrapes metadata from requested uri.
	if(!empty($form['field_url'])) {
		$form['field_url']['meta_scraper'] = [
			'#type' => 'button',
			'#value' => t('Scrape metadata from URL'),
			'#limit_validation_errors' => array(),
			// '#attributes' => ['onclick' => 'return false;'],
			'#attached' => [
				'library' => ['ucsfpharmacy/meta_scraper'],
			],
			'#ajax' => [
				'callback' => 'ucsfpharmacy_meta_scraper',
				'event' => 'click',
				'disable-refocus' => FALSE,
			],
		];
	}
}

/**
 * Callback function that retrieves html from requested uri.
 * @see ucsfpharmacy_form_node_article_form_alter().
 */
function ucsfpharmacy_meta_scraper(&$form, FormStateInterface $form_state) {
	if($uri = $form_state->getValue('field_url')[0]['uri']) {
		if($html = file_get_contents($uri)) {
			$dom = Html::load($html);
			$metas = $dom->getElementsByTagName('meta');
			foreach ($metas as $meta){
				if($property = $meta->getAttribute('property')) {
					$data[$property] = $meta->getAttribute('content');
				}
			}
			$response = new AjaxResponse();
			$response->addCommand(new InvokeCommand(NULL, 'metaScraperAjaxCallback', [$data]));

			// $data is passed to js/meta_scraper.js for client-side processing.
			return $response;
		}
	}
	// On empty or error, return empty markup so it does nothing.
	return ['#markup' => ''];
}

/**
 * Implements hook_form_form_id_alter() for media_library_add_form_upload.
 */
function ucsfpharmacy_form_media_library_add_form_upload_alter(&$form, FormStateInterface $form_state) {
	// Do only if a media file has been uploaded.
	if($media = $form_state->get('media')) {
		// Show SVG preview thumbnail in modal add media form.
		if(!empty($media[0]->field_media_svg) && \Drupal::service('module_handler')->moduleExists('svg_image_field')) {
			$form['media'][0]['preview']['thumbnail'] = [
				"#theme" => "svg_image_field_formatter",
				"#uri" => $media[0]->field_media_svg->entity->getFileUri(),
			];
		}
	}
}

/**
 * Implements hook_form_form_id_alter() for editor_media_dialog.
 */
function ucsfpharmacy_form_editor_media_dialog_alter(&$form, FormStateInterface $form_state) {
	// Get selected media item.
	$media_embed_element = $form_state->get('media_embed_element');
	$media = \Drupal::service('entity.repository')->loadEntityByUuid('media', $media_embed_element['data-entity-uuid']);

	// Add media item edit link.
	$form['media_item_edit_link'] = [
		'#type' => 'item',
		'#markup' => t('These options apply only to this specific appearance of this media item.<br />
			To edit global settings such as crop selections or alt text: <a target="_blank" href="/media/'.$media->id().'/edit">/media/'.$media->id().'/edit</a>.'),
		'#weight' => -100,
	];

	// remove wysiwyg alt override field
	unset($form['alt']);

	// add caption field explanation
	$form['caption']['#description'] = 'Provides an area in the wysiwyg beneath this media item for captions.';

	// Add data-size filter options.
	$form['size'] = array(
		'#title' => 'Size',
		'#type' => 'select',
		'#options' => [
			'100' => '100%',
			'75'  => '75%',
			'66'  => '66.66%',
			'50'  => '50%',
			'33'  => '33.33%',
			'25'  => '25%',
			'16'  => '16.66%',
		],
		'#parents' => ['attributes', 'data-size'],
		'#default_value' => empty($media_embed_element['data-size']) ? '100' : $media_embed_element['data-size'],
		'#weight' => 100,
	);

	// $form['align']['#default_value'] = 'none';
	// unset($form['align']['#options']['center']);

	$bundle = $media->bundle();
	// Remove view mode options for anything but image type.
	if($bundle != 'image') {
		unset($form['view_mode']);
	}
	// Remove size options for audio and document types.
	if($bundle == 'audio' || $bundle == 'document') {
		unset($form['size']);
	}
}

/**
 * Implements hook_ckeditor_css_alter().
 */
function ucsfpharmacy_ckeditor_css_alter(array &$css, Editor $editor) {
	// Attach media custom css to ckeditor such as for data-size filter.
	$css[] = drupal_get_path('module', 'ucsfpharmacy') . '/css/media.css';
}

/**
 * Implements template_preprocess_field().
 */
function ucsfpharmacy_preprocess_field(&$variables) {
	$element = $variables['element'];

	// Change am/pm to a.m./p.m. to adhere to SOP style guide
	if($element['#formatter'] == 'timestamp') {
		foreach($element['#items'] as $i => $item) {
			$variables['items'][$i]['content']['#markup'] = str_ireplace(array('am','pm'), array('a.m.','p.m.'), $element[$i]['#markup']);
		}
	}
}

/**
 * Implements template_preprocess_image_formatter().
 */
function ucsfpharmacy_preprocess_image_formatter(&$variables) {
	// Use svg_image_field_formatter instead of image_formatter for SVG images.
	$entity = $variables['item']->getEntity();
	if(!empty($entity->field_media_svg)
		&& \Drupal::service('module_handler')->moduleExists('svg_image_field')
		&& !empty($variables['image_style'])
	){
		$variables['image']['#theme'] = 'svg_image_field_formatter';
		$variables['image']['#uri'] = $entity->field_media_svg->entity->getFileUri();
		$image_style = ImageStyle::load($variables['image_style']);
		/** @var \Drupal\image\Annotation\ImageEffect $effect */
		foreach($image_style->getEffects() as $effect) {
			$config = $effect->getConfiguration();
			if($config['id'] == 'image_scale' && !empty($config['data']['width'])) {
				$variables['image']['#attributes']['width'] = $config['data']['width'];
			}
		}
	}
}

/**
 * Implements template_preprocess_media_library_item().
 */
function ucsfpharmacy_preprocess_media_library_item(array &$variables) {
	// add edit media link so users can edit fields attached to media entities
	$mid = $variables['element']['target_id']['#value'];
	$variables['content']['rendered_entity']['#suffix'] = '<div class="edit-media-link"><a href="/media/'.$mid.'/edit" target="_blank">edit media</a></div>';
}

/**
 * Implements template_preprocess_page().
 */
function ucsfpharmacy_preprocess_page(&$variables) {
	// Attach media custom css such as for data-size filter.
	$variables['#attached']['library'][] =  'ucsfpharmacy/media';
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Alter specific field widgets to use only specific text formats and remove
 * editor ui components.
 */
function ucsfpharmacy_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
	$field_name = $context['items']->getFieldDefinition()->getName();
	switch($field_name) {
		case 'field_caption':
			$element['#allowed_formats'] = ['caption'];
			$element['#after_build'][] = '_ucsfpharmacy_alter_text_format_box';
			break;
		case 'field_transcript':
			$element['#allowed_formats'] = ['transcript'];
			$element['#after_build'][] = '_ucsfpharmacy_alter_text_format_box';
			break;
		case 'field_gallery':
			// only users with administer node permission may use add existing entity form
			$user = \Drupal::currentUser();
			if(!$user->hasPermission('administer node')) {
				unset($element['actions']['ief_add_existing']);
			}
			break;
	}
}

/**
 * #after_build callback.
 * @see ucsfpharmacy_field_widget_form_alter().
 */
function _ucsfpharmacy_alter_text_format_box($form_element, FormStateInterface $form_state) {
	$format_id = $form_element['#format'];
	switch($format_id) {
		default:
			unset($form_element['format']['help']);
			unset($form_element['format']['guidelines']);
			unset($form_element['format']['#type']);
			unset($form_element['format']['#theme_wrappers']);
	}

	return $form_element;
}

/**
 * Implements hook_entity_type_create() for file.
 */
function ucsfpharmacy_file_create(EntityInterface $file) {
	// Convert PNG uploads to JPG
	if($file->getMimeType() == 'image/png') {
		// Create new JPG image.
		$uri = $file->getFileUri();
		$toolkit = \Drupal::service('image.toolkit.manager')->getDefaultToolkit();
		/** @var \Drupal\Core\Image\Image $image */
		$image = new Image($toolkit, $uri);
		$image->convert('jpg');
		$image->save($uri);

		// Replace original metadata with new JPG metadata.
		$file->setFilename($file->getFilename() . '.jpg');
		$file->setMimeType($image->getMimeType());
		$file->setSize($image->getFileSize());

		\Drupal::messenger()->addStatus(t('PNG converted to JPG.'));
	}
}

/**
 * Implements hook_entity_type_presave() for media.
 */
function ucsfpharmacy_media_presave(EntityInterface $media) {
	if($media->bundle() == 'remote_video') {
		if($media->isNew()) {
			// default thumbnail alt to media name
			$media->thumbnail[0]->set('alt', $media->name->value);
		}
		// copy auto-generated thumbnail to empty custom thumbnail field
		if(empty($media->field_media_image[0])) {
			$media->field_media_image = $media->thumbnail;
		}
		// if video duration is empty and is youtube, try to get with youtube api
		if(isset($media->field_duration) && empty($media->field_duration[0]) && strpos($media->field_media_oembed_video[0]->value, 'youtube.com') !== FALSE) {
			$video_url = $media->field_media_oembed_video[0]->value;
			$values = UrlHelper::parse($video_url);
			if (!empty($values['query']['v'])
				&& $duration = _ucsfpharmacy_youtube_get_video_length($values['query']['v'])
			) {
				$media->field_duration->setValue(['duration'=>$duration]);
			}
		}
	}
}

/**
 * Implements hook_entity_type_presave() for node.
 */
function ucsfpharmacy_node_presave(EntityInterface $entity) {

	// Sets a persons eds/profile reference automatically by matching a persons
	// email to an eds/profile node label. (The label value is in email format.)
	// If a pharmacy person entity reference field exists, set its eds/profile
	// reference to the same eds/profile node.
  if(\Drupal::service('module_handler')->moduleExists('ucsf_eds_profiles')
  	&& !empty($entity->field_person_email->value)
  	&& $entity->hasField('field_ucsfedsprofiles')
  ) {
  	// Eds/profile node or null.
    $eds = @$entity->field_ucsfedsprofiles->entity;
  	// Node id or null.
  	$eds_id = ($eds) ? @$eds->id() : null;
    $email = @$entity->field_person_email->value;

  	// Sync eds/profile field.
    if($eds == null || $eds->label() != $email) {
	    $matches = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['type' => 'ucsf_eds_profiles', 'title' => $email]);
	    // Node id if there is a match or null if no matches.
	    $eds_id = key($matches);
	    if($eds_id == null) {
	      try {
	        $eds = Node::create(['type' => 'ucsf_eds_profiles', 'title' => $email]);
	        // ucsf_eds_profiles_node_sync() does api calling to sync data.
	        $eds_id = (ucsf_eds_profiles_node_sync($eds)) ? $eds->id() : null;
	      } catch(Exception $e) {
	        dpm($e->getMessage());
	      }
	    }
	    // Set eds/profile entity ref field to valid node id.
	    if($eds_id) {
	      $entity->set('field_ucsfedsprofiles', ['target_id' => $eds_id]);
	    }
	  }

  	// Sync nested pharmacy persons eds/profile field.
  	if($eds_id
  		&& $entity->hasField('field_ucsfphps')
  		&& $pharmacy_person = @$entity->field_ucsfphps->entity
  	) {
  		$pharmacy_person_eds = @$pharmacy_person->field_ucsfedsprofiles->entity;
  		if($pharmacy_person_eds == null || $pharmacy_person_eds->id() != $eds_id) {
  			$pharmacy_person->set('field_ucsfedsprofiles', ['target_id' => $eds_id]);
  			@$pharmacy_person->save();
  		}
  	}
	}
}

/**
 * Implements hook_inline_entity_form_entity_form_alter().
 */
function ucsfpharmacy_inline_entity_form_entity_form_alter(array &$entity_form, FormStateInterface &$form_state) {
  $input = $form_state->getUserInput();
  $title = $input['title'][0]['value'];
  $entity_form['title']['widget'][0]['value']['#default_value'] = $title;
  $entity_form['title']['widget'][0]['value']['#attributes']['readonly'] = TRUE;
}

/**
 * Helper function to get YouTube video duration.
 * @see ucsfpharmacy_media_presave().
 * @todo move api key to file outside web docroot
 */
function _ucsfpharmacy_youtube_get_video_length($id = NULL) {
	if(empty($id)) {
		return '';
	}
	$client = \Drupal::httpClient();
	$request = $client->request('GET', 'https://www.googleapis.com/youtube/v3/videos', [
		'query' => [
			'key'=>'AIzaSyC2gCkFvOL52VUEHB-7An3V8VsnymhOVyQ',
			'part'=>'contentDetails',
			'id'=>$id,
		]
	]);
	try {
		$response = json_decode($request->getBody());
		if(empty($response->items[0]->contentDetails->duration)) {
			return '';
		}
		$duration = $response->items[0]->contentDetails->duration;
		// $interval = new DateInterval($duration);
		// $length = trim($interval->format('%H:%I:%S'));
		// return $length;
		return $duration;
	} catch (Exception $e) {
		return '';
	}
}

/**
 * Implements hook_editor_js_settings_alter().
 */
function ucsfpharmacy_editor_js_settings_alter(array &$settings) {
	// Set initial textbox height to lower value.
	if (!empty($settings['editor']['formats'])) {
		foreach($settings['editor']['formats'] as $format_id => $format_settings) {
			switch($format_id) {
				case 'caption':
					$settings['editor']['formats'][$format_id]['editorSettings']['autoGrow_minHeight'] = 50;
					break;
				default:
					$settings['editor']['formats'][$format_id]['editorSettings']['autoGrow_minHeight'] = 85;
			}
		}
	}
}

/**
 * Implements hook_theme().
 */
function ucsfpharmacy_theme($existing, $type, $theme, $path) {
	return [
		'field__media__field_transcript' => [
			'template' => 'field--media--field-transcript',
			'base hook' => 'field',
		],
	];
}

/**
 * Implements hook_preprocess_hook() for media.
 */
function ucsfpharmacy_preprocess_media(array &$variables) {
	// our elements of interest
	$media = $variables['elements']['#media'];
	// media_type can be 'image', 'audio', 'document', 'remote_video', 'svg'
	$media_type = $media->bundle->target_id;

	if (
		( $media_type == 'image' || $media_type == 'remote_video' )
		&&
		isset( $media->field_media_image )
		&&
		isset( $media->field_media_image->alt )
	){
		$alt_tag = $media->field_media_image->alt;

		if ( $alt_tag == '!decorative' ) {
			// special alt string designation that should output as empty string for images
			$media->field_media_image->alt = '';

		} elseif ( !empty( $alt_tag ) ){
			// If an existing alt tag doesn't already have a period at the end, add one. This provides a subtle pause that is friendlier for screen reader users and is therefore better for accessibility.
			$new_alt_tag = substr( $alt_tag , -1 ) == '.' ? $alt_tag : $alt_tag . '.';

			// If an existing alt tag begins with image of, photo of, picture of, or video of, remove it. This removes redundancy for screen reader users and is therefore better for accessibility.
			$new_alt_tag = preg_replace( "/(image|photo|picture|video)( of)?(: )? ?/i" , '' , $new_alt_tag );

			$media->field_media_image->alt = $new_alt_tag;
		}
	}
}

/**
 * Implements hook_preprocess_hook() for media_oembed_iframe.
 *
 * Prevent YouTube tracking for inner iframe created by YouTube.
 * @see https://www.drupal.org/project/drupal/issues/3043821#comment-13423651
 */
function ucsfpharmacy_preprocess_media_oembed_iframe(&$variables) {
	if (strpos((string) $variables['media'], 'youtube.com') !== FALSE) {
		$variables['media'] = IFrameMarkup::create(str_replace('youtube.com/', 'youtube-nocookie.com/', $variables['media']));
	}
}

/**
 * Implements template_preprocess_block().
 */
function ucsfpharmacy_preprocess_block(&$variables) {
	// nothing for now
}

/**
 * Implements hook_entity_insert().
 */
function ucsfpharmacy_entity_insert(EntityInterface $entity) {
	// Force "Make this content available on all domains" on specific entity types.
	$bundles  = array(
								'affiliation',
								'attribution',
								'gallery',
								'linkable_media',
								'organization',
								'people_list',
								'people',
							);
	if(\Drupal::service('module_handler')->moduleExists('domain_access') && in_array($entity->bundle(), $bundles)) {
		$entity->set(DOMAIN_ACCESS_ALL_FIELD, 1);
	}
}
